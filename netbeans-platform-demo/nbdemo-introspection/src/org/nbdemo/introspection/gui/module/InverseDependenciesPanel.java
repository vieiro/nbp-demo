/*
 * Copyright 2017 Antonio Vieiro (antonio@vieiro.net)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */package org.nbdemo.introspection.gui.module;

import java.awt.BorderLayout;
import org.nbdemo.introspection.nodes.ModuleProperties;
import org.nbdemo.introspection.nodes.dependencies.modules.ModuleDependencyInvertedTypeModuleListNode;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.modules.ModuleInfo;
import org.openide.nodes.Node;
import org.openide.util.Lookup;

/**
 * Given a module, displays the Dependency.TYPE_MODULE dependencies.
 *
 */
public class InverseDependenciesPanel extends javax.swing.JPanel implements ExplorerManager.Provider, Lookup.Provider {

    private Node moduleModuleDependenciesNode;
    private ExplorerManager explorerManager;
    private OutlineView outlineView;
    private Lookup lookup;

    /**
     * Creates new form DirectDependenciesPanel
     */
    public InverseDependenciesPanel() {
        initComponents();
        explorerManager = new ExplorerManager();
        lookup = ExplorerUtils.createLookup(explorerManager, getActionMap());
        outlineView = new OutlineView("Dependencies");
        add(outlineView, BorderLayout.CENTER);
        outlineView.getOutline().setRootVisible(false);
        outlineView.getOutline().setShowGrid(true);

        // @see ModuleDependencyTypeModuleNode for a list of properties.
        outlineView.setPropertyColumns(
                ModuleProperties.PROP_CODENAMEBASE, "Code name base",
                ModuleProperties.PROP_APIVERSION, "API version",
                ModuleProperties.PROP_IMPLVERSION, "Impl. version"
        );
    }

    public void setModuleInfo(ModuleInfo moduleInfo) {
        if (moduleInfo == null) {
            setToolTipText("No module");
            this.moduleModuleDependenciesNode = Node.EMPTY;
        } else {
            setToolTipText(moduleInfo.getDisplayName());
            this.moduleModuleDependenciesNode = new ModuleDependencyInvertedTypeModuleListNode(moduleInfo);
        }
        explorerManager.setRootContext(this.moduleModuleDependenciesNode);
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    @Override
    public Lookup getLookup() {
        return lookup;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
